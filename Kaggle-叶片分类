# 源代码地址  https://www.kaggle.com/nekokiku/simple-resnet-baseline 作者：NEKO KIKU

# 导入库
import os; os. environ['KMP_DUPLICATE_LIB_OK']='TRUE'
import torch
import numpy as np
import pandas as pd
from torch import nn
from torch.nn import functional as F
from torch.utils.data import Dataset, DataLoader
from torchvision import transforms
from PIL import Image
import torchvision.models as models
from tqdm import tqdm
import seaborn as sns
from matplotlib import pyplot as plt

labels_dataframe = pd.read_csv('train.csv')  # 导入训练集
labels_dataframe.head(5)  # 对训练集前5个数据进行预览

labels_dataframe.describe()  # 展现数据集的描述

print(type(labels_dataframe))  # 打印数据集格式

# 柱状图函数
def barw(ax): 
    
    for p in ax.patches:
        val = p.get_width() #height of the bar
        x = p.get_x()+ p.get_width() # x- position 
        y = p.get_y() + p.get_height()/2 #y-position
        ax.annotate(round(val,2),(x,y))
        
#finding top leaves

plt.figure(figsize = (15,30))
ax0 =sns.countplot(y=labels_dataframe['label'],order=labels_dataframe['label'].value_counts().index)
barw(ax0)
plt.show()

# set剔除重复的label数据，创建一个无序不重复的元素集，转为list格式，再对label进行排序
leaves_labels = sorted(list(set(labels_dataframe['label'])))

n_classes = len(leaves_labels)  # label的长度
print(n_classes)
leaves_labels[:10]

# zip将对象中对应的元素打包成一个个元组，然后返回由这些元组组成的对象， dict将对象依次编为字典元素
class_to_num = dict(zip(leaves_labels, range(n_classes)))  # 将label转换为对应的数字
class_to_num

# 再转换回来，方便最后预测的时候使用
num_to_class = {v : k for k, v in class_to_num.items()}  # 将label和对应编号相互调换一下
num_to_class

# 创建自己的数据集，继承pytorch的Dataset
class LeavesData(Dataset):
    def __init__(self, csv_path, file_path, mode = 'train', valid_ratio = 0.2, resize_height = 256, resize_width = 256):
        super(LeavesData, self).__init__()
        """
        Args:
            csv_path (string): csv 文件路径
            img_path (string): 图像文件所在路径
            mode (string): 训练模式还是测试模式
            valid_ratio (float): 验证集比例
        """
        
        # 调整图片尺寸
        self.resize_height = resize_height
        self.resize_width = resize_width
        
        # 文件路径
        self.file_path = file_path
        
        # 读取 csv 文件
        # 利用pandas读取csv文件
        self.data_info = pd.read_csv(csv_path, header=None)  # header=None是去掉表头部分
        
        # 计算总数据长度
        self.data_len = len(self.data_info.index) - 1
        
        # 分配训练集长度
        self.train_len = int(self.data_len * (1 - valid_ratio))
        
        # 模式判断
        if mode == 'train':
            # 第一列包含图像文件的名称
            self.train_image = np.asarray(self.data_info.iloc[1:self.train_len, 0])  #self.data_info.iloc[1:,0]表示读取第一列，从第二行开始到train_len
            # 第二列是图像的 label
            self.train_label = np.asarray(self.data_info.iloc[1:self.train_len, 1])
            self.image_arr = self.train_image 
            self.label_arr = self.train_label
        elif mode == 'valid':
            self.valid_image = np.asarray(self.data_info.iloc[self.train_len:, 0])  
            self.valid_label = np.asarray(self.data_info.iloc[self.train_len:, 1])
            self.image_arr = self.valid_image
            self.label_arr = self.valid_label
        elif mode == 'test':
            self.test_image = np.asarray(self.data_info.iloc[1:, 0])
            self.image_arr = self.test_image
            
        self.real_len = len(self.image_arr)

        print('Finished reading the {} set of Leaves Dataset ({} samples found)'
              .format(mode, self.real_len))
		... 未完待更新







